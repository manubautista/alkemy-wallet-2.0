[{"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\index.js":"1","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\App.js":"2","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\reportWebVitals.js":"3","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\ShowOperations.jsx":"4","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\CreateOperation.jsx":"5","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\EditOperation.jsx":"6","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\Balance.jsx":"7","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\NavBar.jsx":"8","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\Footer.jsx":"9","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\firebase.js":"10"},{"size":601,"mtime":1660399674667,"results":"11","hashOfConfig":"12"},{"size":905,"mtime":1660423788752,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1653912897207,"results":"14","hashOfConfig":"12"},{"size":5702,"mtime":1660423779918,"results":"15","hashOfConfig":"12"},{"size":4283,"mtime":1660423795429,"results":"16","hashOfConfig":"12"},{"size":4231,"mtime":1660423792080,"results":"17","hashOfConfig":"12"},{"size":1355,"mtime":1660423804059,"results":"18","hashOfConfig":"12"},{"size":614,"mtime":1660415319731,"results":"19","hashOfConfig":"12"},{"size":446,"mtime":1660415294975,"results":"20","hashOfConfig":"12"},{"size":800,"mtime":1660409054242,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"11rm8f5",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\index.js",[],[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\App.js",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\reportWebVitals.js",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\ShowOperations.jsx",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\CreateOperation.jsx",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\EditOperation.jsx",["55"],[],"import { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { db } from \"../firebase\";\r\nimport Swal from \"sweetalert2\";\r\nimport Balance from \"./Balance\";\r\n\r\nconst EditOperation = () => {\r\n  const [concept, setConcept] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    getOperationById();\r\n  }, []);\r\n\r\n  // Procedimiento para actualizar\r\n  const update = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      await db.collection(\"operations\").doc(id).update({\r\n        concept: concept,\r\n        amount: amount,\r\n        date: date,\r\n        type: type,\r\n        category: category,\r\n      });\r\n      navigate(\"/\");\r\n      Swal.fire({\r\n        position: \"top-end\",\r\n        icon: \"success\",\r\n        title: \"Changes has been saved!\",\r\n        showConfirmButton: false,\r\n        timer: 1500,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"Something went wrong, try again later...\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const getOperationById = async () => {\r\n    try {\r\n      const querySnapshot = await db.collection(\"operations\").doc(id).get();\r\n      setConcept(querySnapshot.data().concept);\r\n      setAmount(querySnapshot.data().amount);\r\n      setDate(querySnapshot.data().date);\r\n      setType(querySnapshot.data().type);\r\n      setCategory(querySnapshot.data().category);\r\n    } catch (error) {\r\n      console.log(error);\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"Something went wrong, try again later...\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"App-header\">\r\n        <Balance />\r\n      </div>\r\n      <form onSubmit={update} className=\"card mx-5\">\r\n        <h3 className=\"card-header\">Edit Operation</h3>\r\n        <div className=\"card-body\">\r\n          <label className=\"form-label\">\r\n            Concept<i className=\"fa-thin fa-asterisk\"></i>\r\n          </label>\r\n          <input\r\n            value={concept}\r\n            onChange={(e) => setConcept(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <label className=\"form-label\">\r\n            Amount<i className=\"fa-thin fa-asterisk\"></i>\r\n          </label>\r\n          <input\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            min={1}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"mb-3 card-body\">\r\n          <label className=\"form-label\">\r\n            Date<i className=\"fa-thin fa-asterisk\"></i>\r\n          </label>\r\n          <input\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <label className=\"form-label\">Category</label>\r\n          <i className=\"fa-thin fa-asterisk\"></i>\r\n          <select\r\n            value={category}\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            className=\"form-control\"\r\n            required\r\n          >\r\n            <option value=\"other\">Other</option>\r\n            <option value=\"job\">Job</option>\r\n            <option value=\"food\">Food</option>\r\n            <option value=\"entertainment\">Entertainment</option>\r\n            <option value=\"health\">Health</option>\r\n            <option value=\"gasoline\">Gasoline</option>\r\n            <option value=\"gift\">Gift</option>\r\n            <option value=\"house\">House</option>\r\n            <option value=\"family\">Family</option>\r\n          </select>\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-secondary\">\r\n          Edit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditOperation;\r\n","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\Balance.jsx",["56"],[],"import { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport Swal from \"sweetalert2\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst Balance = () => {\r\n  var bal = 0;\r\n\r\n  const [operations, setOperation] = useState([]);\r\n  const [loader, setLoader] = useState(true);\r\n  useEffect(() => {\r\n    getOperations();\r\n  }, []);\r\n\r\n  // Procedimiento para traer todas las operaciones\r\n  const getOperations = async () => {\r\n    try {\r\n      const docs = [];\r\n      const querySnapshot = await db.collection(\"operations\").get();\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setOperation(docs);\r\n      setLoader(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"Something went wrong, try again later...\",\r\n      });\r\n    }\r\n  };\r\n\r\n  operations.map((operation) => {\r\n    if (operation.type === \"expense\") {\r\n      bal -= parseInt(operation.amount);\r\n    } else {\r\n      bal += parseInt(operation.amount);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {loader ? (\r\n        <div className=\"mx-auto\">\r\n          <Spinner animation=\"grow\" variant=\"light\" />\r\n        </div>\r\n      ) : (\r\n        <h1>${bal} </h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\NavBar.jsx",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\components\\Footer.jsx",[],[],"D:\\Projects\\React\\alkemy-wallet\\react-wallet\\src\\firebase.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":18,"column":6,"nodeType":"59","endLine":18,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":35,"column":30,"nodeType":"63","messageId":"64","endLine":35,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getOperationById'. Either include it or remove the dependency array.","ArrayExpression",["65"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"66","fix":"67"},"Update the dependencies array to be: [getOperationById]",{"range":"68","text":"69"},[583,585],"[getOperationById]"]